import java.util.Stack;

class Solution {
    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        
        Stack<Integer> stack = new Stack<>();

        for(int c : moves) {
            c --;
            
            for(int i = 0; i < board.length; i++) {
                if(board[i][c] != 0) {
                    int now = board[i][c];
                    board[i][c] = 0;
                    
                    int pre = (stack.isEmpty()) ? 0 : stack.peek();
                    
                    if(pre == now) {
                        stack.pop();
                        answer += 2;
                    } else {
                        stack.push(now);
                    }
                    break;
                }
            }
        }
        
        return answer;
    }
}

/*
 - NN 정사각
 - 인형 없는 칸 빈칸, 아래부터 쌓여 잇음
 - 크레인 좌, 우 가장 위에잇는 인형 바구니에 넣음 (아래부터 쌓임) // 인형 없으면 변화 없음
 - 같은 인형 두 개가 연속되면 인형은 바구니에서 사라짐 // 충분히 큼
 
 - 사라진 인형 개수는?
 
1. 정답의 최대치
    30 * 30
2. 간단한 접근
    크레인 위치 마다 배열을 탐색한다. 각행의 board[i][크레인 위치];
        0이 아니면 뽑는다. (해당 배열 값을 0으로 만든다.)
            만약 이전것과 같다면 현재와 이전 것을 없애고 cnt ++ 2;
            다르다면 stack에 넣어둔다.

*/