import java.util.*;

class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = new int[2];

        for(int i = 1; i * i <= yellow; i ++) {
            if(yellow % i != 0) continue;
            int hor = yellow / i; 
            int ver = i;
            System.out.println(hor + " hor : ver " + ver);
            int brownCnt = getBrownCount(hor, ver);
            if(brown == brownCnt) {
                answer[0] = hor+2; 
                answer[1] = ver+2;
                break;
            }
        }
        
        
        return answer;
    }
    
    int getBrownCount(int hor, int ver) {
        return hor * 2 + ver * 2 + 4;
    }
}

/*

- 카펫의 가로 >= 세로 이다.

노랑이 3이라 가정하자.
1*3 이 가능하다.
노랑이 4라 가정하자.
1*4 2*2가 가능하다.

갈색의 수는 노랑가로*2 + 노랑 세로*2 + 4 이다.

따라서 노랑의 약수를 구하여 가로와 세로를 구한다.
    i로 나누었을 때, 나머지가 0 인 경우 약수이다. 갈색을 구한다.
        항상 앞이 작으므로, 앞이 세로이다.
    i*i가 N보다 크면 종료한다.
갈색의 수를 만족하는 노랑을 구하고, 노랑 가로 + 2, 노랑 세로 + 2를 구한다.
    
*/