class Solution {
    StringBuilder sb;
    
    public String solution(String new_id) {
        String answer = "";
        
        // sb 생성 -> 함수 분리로 전역 변수        
        // 소문자로 변경 -> String 변환 후 입력
        sb = new StringBuilder(new_id.toLowerCase());
        
        // 필요없는 문자 제거 
        deleteDisableChar();
        
        // 연속 ... .으로 변경
        multiDotToSingle();
        
        // 처음, 끝 .제거
        deleteEdgeDot();
        
        // 빈문자 검증 후 a 추가
        if(sb.length() == 0) sb.append('a');
        
        // 문자길이 16이상인지 확인
        if(sb.length() > 15) cutLength();
        
        // 문자길이 3이상인지 확인
        if(sb.length() < 3) makeLength3();
        
        return sb.toString();
    }
    
    // sb 순회 및 제거
    void deleteDisableChar() {
        for(int i = 0; i < sb.length(); i++) {
            // 사용할 수 없는 문자면 제거, i-1(변경된 부분 부터 재탐색)
            if(!isAble(sb.charAt(i))) {
                sb.delete(i, i+1);
                i--;
            }
        }
    }
    
    boolean isAble(char c) {
        // 소문자 아니고, 숫자도 아니고, -, _, . 도 아니면 true
        if('a' <= c && 'z' >= c) return true;
        if('0' <= c && '9' >= c) return true;
        if(c == '-' || c == '_' || c == '.') return true;
        return false;
    }
    
    void multiDotToSingle() {
        /*
        sb를 순회하며 .을 만나면 cnt를 한다.
            start index가 된다. end도 indx이다.
        .이 이어지면 end가 ++ 된다.
        start~end+1을 . 으로 변경한다.
            -> ... 이면 00 01 02 ... 0~2가 0으로 변경된다.
        start idx +1로 돌아가서 계속 검증한다.
            i를 start로 바꾸면 ++되어 다음부터 한다.
            start, end를 -1로 바꾼다.
        마지막 idx에 도달하면 .이더라도 변환을 수행한다.
        */
        
        int start = -1; int end = -1;
        for(int i = 0; i < sb.length(); i++) {
            if(sb.charAt(i) == '.') {
                // 첫 .은? start가 0이면 무조건 첫 .
                if(start == -1) {
                    start = i; end = i;
                } else {
                    // 첫.이 아니면 end만 ++;
                    end = i;
                }
                
                if(i == sb.length()-1) {
                    // .이 아닌데 이전까지 .이었으면 .으로 변경
                    sb.replace(start, end+1, ".");
                    // . 초기화 -> . 검색 start 부터
                    i = start;
                    start = -1; end = -1;
                }
            } else {
                // 지금도, 이전도 .이 아니면 넘어감
                if(start == -1) continue;
                
                // .이 아닌데 이전까지 .이었으면 .으로 변경
                sb.replace(start, end+1, ".");
                // . 초기화 -> . 검색 start 부터
                i = start;
                start = -1; end = -1;
                
            }
        }
        
    }
    
    void deleteEdgeDot() {
        // 제거 후, sb가 비어 있으면 skip
        if(sb.length() > 0 && sb.charAt(0) == '.') sb.delete(0, 1);
        if(sb.length() > 0 && sb.charAt(sb.length()-1) == '.') sb.delete(sb.length()-1, sb.length());
    }
    
    void cutLength() {
        // 길이를 15자로 만든다.
        sb.setLength(15);
        // 마지막 .을 제거한다.
        deleteEdgeDot();
    }
    
    void makeLength3() {
        while(sb.length() < 3) {
            sb.append(sb.charAt(sb.length()-1));
        }
    }
}

/*
ID가 주어진다.
7단계로 적합한지 검사한다.
새로운 ID를 만들어 준다.

1. 접근
    문자열을 변환하므로 SB를 사용한다.
    1. 소문자로 치환
    2. 문자제거
        sb를 순회하며, 해당 문자면 제거한다.
            sb.remove(index)
    3. ... 연속 . 으로 변경
        sb를 순회하며 .을 만나면 cnt를 한다.
            start index가 된다. end도 indx이다.
        .이 이어지면 end가 ++ 된다.
        start~end+1을 . 으로 변경한다.
            -> ... 이면 00 01 02 ... 0~2가 0으로 변경된다.

        start idx +1로 돌아가서 계속 검증한다.
    4. 처음, 끝 . 제거
        처음, 마지막 Idx에 .이 있으면 제거한다.
            -> 연속은 이미 제거해서 없을 것
    5. 빈문자면 a 추가
    6. 16자 이상이면 15까지, 처음, 끝 . 제거
        16이상이면 길이를 0~15까지만 남긴다. 
            remove start, end 가능?
            안되면 새로운 sb 생성
        처음, 끝 . 제거
    7. 길이가 2자 이하면 마지막 문자 3까지 추가

2. 케이스
     양 끝 . 제거 ..AAa.. aaa
    ..A..a.a.a a.a.a.a 
    delete후 마지막 dot 제거 12345678901234.67 12345678901234
    
*/