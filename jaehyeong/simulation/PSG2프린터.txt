import java.util.*;

class Solution {
    static int[] count;
    static int maxP, answer, loca;
    static Queue<Integer> Q;
    
    public int solution(int[] priorities, int location) {
        loca = location;
        
        count = new int[10];
        Q = new LinkedList<>();

        for(int i : priorities) {
            count[i]++;
            Q.add(i);
        }
        
        maxP = 9;        
        solve();
        
        return answer;
    }
    
    void solve() {
        while(!Q.isEmpty()) {
            System.out.print(loca);

            if(count[maxP] == 0) updateMax();

            int now = Q.poll();           
            if(now == maxP) {
                answer++; count[maxP]--;
                if(loca == 0) break;
            } else {
                Q.add(now);
            }
            
            if(loca == 0) loca = Q.size()-1;
            else loca --;
        }
    }
    
        
    void updateMax() {
        while(true) {
            if(count[maxP] == 0) maxP--;
            else break;
        }
    }
}

/*
문서의 중요도 들이 순서대로 주어진다.
특정 문서가 몇번째로 출력되는지 찾는 문제이다.

- 하나를 꺼낸다.
- 중요도가 가장 높으면 프린트, 아니면 뒤로 넘긴다.

- 문서는 100개
- 1~9 // 9가 가장 큼
- 0 <= location <= N-1

1. 정답의 최대치 : 100
2. 간단한 접근
    앞에서부터 차례대로, 나머지 중 가장 큰 값인지 확인하고 아니면 뒤에 넣는다. Array, Queue
    100! 정도의 시간이 들 수도 ...
    
    문서 배열에서 중요도를 카운팅한 뒤, 카운팅 배열에 넣는다.
    checkMAX 에서 문서의 현재 최대 치를 확인해 MAXP에 입력한다.
    MAXP와 현재 중요도가 같으면 프린트 하고 -1을 한다. (MAXP가 0이되면 다음 MAXP를 업데이트)
    프린트 할 때마다 cnt++을 한다. (목표 값이면 cnt를 출력한다.)
    목표 인덱스는 어떻게 설정하는가?
        처음 인덱스 에서 -- 하다가 맨뒤로 보내면 가장 뒤 인덱스로 바꿔준다.
3. 시간 복잡도
    카운팅 하는데 100, 순회에 1만정도인가? 흠 ...
4. 케이스
    모두 같은 중요도 일 대
    앞 뒤에 우선순위 높은 중요도, 한칸 뛰어 같은 우선순위
    100개가 작은~큰 순서 있을 때
*/