import java.util.*;

class Solution {
    public int solution(int[] people, int limit) {
        int answer = 0;
        
        ArrayList<Integer> arr = new ArrayList<>();
        for(int i : people) arr.add(i);
        
        // 사람들을 몸무게 순으로 정렬한다.
        Collections.sort(arr, Collections.reverseOrder());
        
        // 가장 무거운 사람을 선택한다.
        for(int i = 0; i < arr.size(); i++) {
            if(i == arr.size()-1) {
                answer++;
                break;
            }
            int heavy = arr.get(i); int light = arr.get(arr.size()-1);
            if(heavy + light <= limit) {
                answer++;
                arr.remove(arr.size()-1);
            } else {
                answer++;
            }
        }
        
        return answer;
    }
}

/*
1. 접근
구명보트를 최대한 적게 사용하여 모두 태워야 한다.
2명까지 탈 수 있고, 무게 한계가 있다.
가장 적게 사용하려면 가능한 2명씩 타야 한다.
가장 무거운 무게의 사람이 먼저 타면, 가장 무게가 적은 사람이 탈 수 있는지 확인한다.
    탈 수 있으면 그 이전 사람이 탈 수 있는지 확인한다.
    2번째로 탈 수 있는 사람 중 가장 무거운 사람이 탄다.
가장 무거운 사람은 가장 가벼운 사람과 탈 수 없다면 아무랑도 탈 수 없을 것이다.
두번째 무거운사람이 가장 가벼운 사람과 탄다면, 가장 무거운 사람이 가장 가벼운 사람과만 탈 수 있으면 손해다.

시간 복잡도 : 매번 한명 + 남은 사람 탐색이 필요하다.
    5만*5만 이하. 애매한데 ...
    뒤에서부터 탐색하므로 실제로는 ... 
    가장 무거운 사람은 가장 가벼운 사람과 타고 가면 된다.
        만일 가장 무거운 사람이 두번째로 가벼운 사람과 타고 갈 수 있다면,
        두번째로 무거운 사람은 두번째로 가벼운 사람과 반드시 타고갈 수 있기 때문이다.
    그럼 5만번으로 가장 뒷사람을 확인하고, 탈 수 있으면 그냥 타고 가면 된다.
    
2. 구현
사람들을 몸무게 순으로 정렬한다.
    가장 무거운 사람을 선택한다.
    가장 가벼운 사람과의 합이 100이하이면
        둘 모두 타고 간다.(제거?) -> 시작과 마지막 index 기록
            ArrayList로 제거하면 제거할 때마다 n의 시간이 걸린다.
            시작 index는 체크하고, 나간 뒷 사람은 제거하면?
            비슷하지만, 주어진 배열이 List이므로 그냥 사용해도 좋다.
            ArrayList로 연습하기 위해 ArrayList 쓰자.
        보트 + 1
        i는 계속 1씩 증가한다.
        ArrayList size는 감소한다. 
        현재 다음 부터 체크하므로, 모두 나갔으면 종료될 것이다. (처음, 마지막 동일 확인 필요)
    100 이상이면
        가장 무거운 사람만 타고간다.
        보트 + 1
    더이상 남은 사람이 없으면 종료한다.
*/