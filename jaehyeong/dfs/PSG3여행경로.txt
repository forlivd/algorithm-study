import java.util.*;

class Solution {
    String[] answer;
    boolean[] visited;
    Map<String, Integer> idxMap;
    String[][] tickets;
    boolean isFind;
    public String[] solution(String[][] tks) {
        tickets = tks; isFind = false;
        answer = new String[tickets.length+1];
        answer[0] = "ICN";
        
        // tickets를 정렬한다.
        Arrays.sort(tickets, new Comparator<String[]> () {
            public int compare(String[] ticket1, String[] ticket2) {
                // 출발지가 같지 않으면 알파벳 순서 
                if(!ticket1[0].equals(ticket2[0])) return ticket1[0].compareTo(ticket2[0]);
                // 출발지가 같으면
                return ticket1[1].compareTo(ticket2[1]);
            }  
        });
        
        for(int i = 0; i < tickets.length; i++) {
            System.out.println(Arrays.toString(tickets[i]));
        }
        
        // tickets에 대응되는 visited boolean[] 배열을 만든다.
        visited = new boolean[tickets.length];
        // HashMap에 각 tickets에 대응되는 index를 넣는다.
        idxMap = new HashMap<>();
        // 처음부터 tickets[0]을 순회하며 다른게 나오면 넣는다.
        String last = "";
        for(int i = 0; i < tickets.length; i++) {
            if(!tickets[i][0].equals(last)) {
                last = tickets[i][0];
                idxMap.put(last, i);
            }
        }
        System.out.println("idxMap "+ idxMap);
        
        // ICN 부터 시작해서 DFS를 한다.
        dfs("ICN", 1);
        
        return answer;
    }
    
    void dfs(String from, int depth) {
        
		        // depth가 tickets length 이면 정답으로 만든다.
		        if(depth == tickets.length+1) {
		            isFind = true;
			            return;
		        }
		        // Map에서 ICN index를 찾아 이동한다. [0]이 icn인 동안, 각 항목을 탐색한다.
						int fromIdx = idxMap.getOrDefault(from, -1);
		        if(fromIdx == -1) return;        for(int i = fromIdx; i < tickets.length; i++) {
            // 출발지랑 다르면 탐색 종료
            if(!tickets[i][0].equals(from)) break;
            // 출발지랑 같고, 사용한 적 없으면 사용
            if(visited[i]) continue;
            visited[i] = true;
            answer[depth] = tickets[i][1];
            dfs(tickets[i][1], depth+1);
            // 이미 정답을 찾았으면 종료
            if(isFind) return;
            visited[i] = false;
            answer[depth] = "";
        }
        // visited = flase 이면 방문하고, visited true 한다. answer[depth] 에 입력한다.
        // 해당 ticket으로 간다. (HashMap에서 Index를 찾는다.)
    }
}

/*
ICN 부터 시작해서, 항공권을 모두 사용할 수 있는지 체크한다.
Depth가 tickets 길이이면 도달한 것이다.
처음부터 정렬해서, 알파벳 순으로 방문하게 하면 된다.
    가장 처음 도달한 것을 답으로 보고, 종료한다.
경로 검색은 어떻게 할 것인가?
    HashMap은 순서를 보장할 수가 없다.
    2차원 인접 리스트로 정렬된 상태로 만들어 둔다.
    HashMap으로 index를 관리한다.
    ticket 길이의 정답 배열을 만들어 둔다. -> 1만 ...
시간 복잡도
    tickets 배열을 정렬한다. 1만log1만 ... 15만?
    dfs로 모든 곳을 방문 해야 한다.
        한번 방문한 곳을 다시 방문할 수도 있다.
        그러나 한번 사용한 티켓은 사용하지 않는다.
        같은 티켓이 여러개 있을 수 있다.
        ... 티켓은 사용할 때 마다 제거해 주는 것이 낫다.
            제거를 안해주면 해당 티켓이 사용되었는지 확인은 어떻게 할 까?
            HashMap에서 Cnt를 visit 시 --, 재귀 종료 시 ++ 해준다.
        ... 만일 제거 해준다면, DFS마다 다시 ArrayList에 추가 및 삭제 필요(n)
        ... HashMap 사용 시 DFS 마다 1만개 HashMap 관리(접근 시 N)
        ... HashMap에 ICN JFK로 저장해두면, 방문체크를 할 수 있다.
        ArrayList로 어디서 ㅇ
    Class를 만드는 것은?
        각 ICN에, 사용 가능한 티켓들을 넣어 둔다.
    --> 구현하며 결정


*/